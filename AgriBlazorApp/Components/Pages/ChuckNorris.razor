@page "/chucknorrisjoke"
@inject ChuckNorrisApiClient ChuckNorrisApiClient

@rendermode InteractiveServer

<PageTitle>Chuck Norris Joke</PageTitle>


<div class="joke-container">
    <div class="joke-center">
        <div class="joke-image"></div>
            @if (isFirstTime)
            {
                <p class="text-danger">Empty. Try me out.</p>
            }
            else if (isLoading)
            {
                <div class="spinner"></div>
            }
            else
            {
                <div class="joke-box">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-danger">@errorMessage</p>
                    }
                    else if (joke != null)
                    {
                        <p class="joke-text">@joke.Value</p>
                    }                
                </div>
            }
    </div>
    <button class="btn btn-primary mt-3" @onclick="GenerateNewJoke">Get New Joke</button>
    
</div>

@code {
    private ChuckNorrisJoke? joke;
    private string? errorMessage;
    private bool isLoading = true;
    private bool isFirstTime;

    protected override void OnInitialized()
    {
        isFirstTime = true;
    }

    // To ensure that the joke is fetched only when the button is clicked and not when the page is opened, you need to separate the logic for fetching the joke from the `OnInitializedAsync` method and use a separate method for updating the joke. Additionally, you can remove the call to `OnInitializedAsync` from the button click event and replace it with the new method.
    // protected override async Task OnInitializedAsync()
    // {
    // }

    private async Task GenerateNewJoke()
    {
        isFirstTime = false;

        isLoading = true;
        errorMessage = null;
        joke = null;

        var result = await ChuckNorrisApiClient.GetRandomJokeAsync();
        joke = result.Joke;
        errorMessage = result.ErrorMessage;
        isLoading = false;

        InvokeAsync(() => StateHasChanged());  // Refresh the component
    }

}